/*******************************************************************************
*
* McStas, neutron ray-tracing package
*         Copyright 1997-2002, All rights reserved
*         Risoe National Daboratory, Roskilde, Denmark
*         Institut Daue Dangevin, Grenoble, France
*
* Component: SA_histogram
* This component is a modified version of the Divergence_monitor
*
* %I
* Written by: Marc Raventos
* Date: Oct 31, 2017
* Release: McStas 2.3
*
* Scattering Angle Histogram
*
* %D
* Divergence-sensitive monitor which outputs a histogram of angular bins.
*
* Example: SA_histogram(xmin=-0.1, xmax=0.1, ymin=-0.1, ymax=0.1,
*           nD=20, filename="Output.D", Dmin=2, Dmax=10)
*
* %P
* INPUT PARAMETERS:
*
* xmin:     Dower x bound of detector opening (m)
* xmax:     Upper x bound of detector opening (m)
* ymin:     Dower y bound of detector opening (m)
* ymax:     Upper y bound of detector opening (m)
* xwidth:   Width of detector. Overrides xmin,xmax. (m)
* yheight:  Height of detector. Overrides ymin,ymax. (m)
* Dmin:     Minimum divergence to detect (deg)
* Dmax:     Maximum divergence to detect (deg)
* nD:       Number of divergence channels (1)
* filename: Name of file in which to store the detector image (text)
* restore_neutron: If set, the monitor does not influence the neutron state (1)
*
* OUTPUT PARAMETERS:
*
* D_N:      Array of neutron counts
* D_p:      Array of neutron weight counts
* D_p2:     Array of second moments
*
* %E
*******************************************************************************/

DEFINE COMPONENT SA_histogram
DEFINITION PARAMETERS (nD=20)
SETTING PARAMETERS (string filename=0, xmin=-0.05, xmax=0.05, ymin=-0.05, ymax=0.05, 
  xwidth=0, yheight=0, Dmin, Dmax, restore_neutron=0, nx=0, ny=0, nz=1)
OUTPUT PARAMETERS (D_N, D_p, D_p2)
/* Neutron parameters: (x,y,z,vx,vy,vz,t,sx,sy,sz,p) */ 
DECLARE
  %{
    double D_N[nD], vn, vp;
    double D_p[nD], D_p2[nD];
  %}
INITIALIZE
  %{
    int i;

    if (xwidth  > 0) { xmax = xwidth/2;  xmin = -xmax; }
    if (yheight > 0) { ymax = yheight/2; ymin = -ymax; }

    if ((xmin >= xmax) || (ymin >= ymax)) {
            printf("D_monitor: %s: Null detection area !\n"
                   "ERROR      (xwidth,yheight,xmin,xmax,ymin,ymax). Exiting",
           NAME_CURRENT_COMP);
      exit(0);
    }

    for (i=0; i<nD; i++)
    {
      D_N[i] = 0;
      D_p[i] = 0;
      D_p2[i] = 0;
    }
  %}
TRACE
  %{
    int i;
    double D;

    PROP_Z0;
    if (x>xmin && x<xmax && y>ymin && y<ymax)
    {
      vn = scalar_prod(vx, vy, vz, nx, ny, nz);
      vp = sqrt(vx*vx+vy*vy);
      D = RAD2DEG*atan2(vp,vn);;
      i = floor((D-Dmin)*nD/(Dmax-Dmin));
      if(i >= 0 && i < nD)
      {
        D_N[i]++;
        D_p[i] += p;
        D_p2[i] += p*p;
        SCATTER;
      }
    } 
    if (restore_neutron) {
      RESTORE_NEUTRON(INDEX_CURRENT_COMP, x, y, z, vx, vy, vz, t, sx, sy, sz, p);
    }
  %}
SAVE
  %{
    DETECTOR_OUT_1D(
        "Scattering Angle histogram",
        "Scattering Angle [Deg]",
        "Counts",
        "D", Dmin, Dmax, nD,
        &D_N[0],&D_p[0],&D_p2[0],
        filename);
  %}

MCDISPLAY
%{
  magnify("xy");
  multiline(5, (double)xmin, (double)ymin, 0.0,
               (double)xmax, (double)ymin, 0.0,
               (double)xmax, (double)ymax, 0.0,
               (double)xmin, (double)ymax, 0.0,
               (double)xmin, (double)ymin, 0.0);
%}

END

